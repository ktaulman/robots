{"map":"{\"version\":3,\"sources\":[\"/Users/kevin/Desktop/robots/robots/src/components/Card.js\",\"/Users/kevin/Desktop/robots/robots/src/components/CardList.js\",\"/Users/kevin/Desktop/robots/robots/src/components/SearchBox.js\",\"/Users/kevin/Desktop/robots/robots/src/components/Scroll.js\",\"/Users/kevin/Desktop/robots/robots/src/containers/App.js\",\"/Users/kevin/Desktop/robots/robots/src/serviceWorker.js\",\"/Users/kevin/Desktop/robots/robots/src/index.js\"],\"names\":[\"Card\",\"_ref\",\"name\",\"email\",\"id\",\"company\",\"react_default\",\"a\",\"createElement\",\"className\",\"alt\",\"src\",\"concat\",\"CardList\",\"robots\",\"cardComponent\",\"map\",\"el\",\"i\",\"src_components_Card\",\"key\",\"SearchBox\",\"searchField\",\"searchChange\",\"type\",\"placeholder\",\"onChange\",\"Scroll\",\"props\",\"style\",\"overflowY\",\"border\",\"height\",\"children\",\"App\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"onSearchChange\",\"event\",\"setState\",\"searchfield\",\"target\",\"value\",\"state\",\"_this2\",\"fetch\",\"then\",\"response\",\"json\",\"users\",\"_this$state\",\"filteredRobots\",\"filter\",\"robot\",\"toLowerCase\",\"includes\",\"length\",\"components_SearchBox\",\"components_Scroll\",\"components_CardList\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"containers_App\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"registration\",\"unregister\"],\"mappings\":\"yNAmBeA,SAhBH,SAAAC,GAA6B,IAA3BC,EAA2BD,EAA3BC,KAAKC,EAAsBF,EAAtBE,MAAMC,EAAgBH,EAAhBG,GAAGC,EAAaJ,EAAbI,QAExB,OACIC,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,uDACXH,EAAAC,EAAAC,cAAA,MAAA,CAAKE,IAAI,SAASC,IAAG,wBAAAC,OAA0BR,EAA1B,cACrBE,EAAAC,EAAAC,cAAA,MAAA,KACIF,EAAAC,EAAAC,cAAA,KAAA,KAAKN,GACLI,EAAAC,EAAAC,cAAA,IAAA,KAAIL,GACJG,EAAAC,EAAAC,cAAA,IAAA,CAAGC,UAAU,SAASJ,OCgBvBQ,EAvBA,SAAAZ,GAAY,IAAVa,EAAUb,EAAVa,OAEPC,EAAgBD,EAAOE,IAAI,SAACC,EAAGC,GACjC,OACIZ,EAAAC,EAAAC,cAACW,EAAD,CACAC,IAAKF,EACLd,GAAIU,EAAOI,GAAGd,GACdF,KAAMY,EAAOI,GAAGhB,KAChBC,MAAOW,EAAOI,GAAGf,MACjBE,QAASS,EAAOI,GAAGb,QAAQH,SAOnC,OACAI,EAAAC,EAAAC,cAAA,MAAA,KACKO,ICLMM,EAfC,SAAApB,GAA+BA,EAA7BqB,YAA6B,IAAhBC,EAAgBtB,EAAhBsB,aAE3B,OACIjB,EAAAC,EAAAC,cAAA,MAAA,KACIF,EAAAC,EAAAC,cAAA,QAAA,CACAC,UAAU,mCACVe,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCAPI,EARA,SAACC,GAChB,OACItB,EAAAC,EAAAC,cAAA,MAAA,CAAKqB,MAAO,CAACC,UAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,SAC/DJ,EAAMK,WC+CAC,cA1CX,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAcJI,eAAe,SAACC,GACZR,EAAKS,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SAdxCZ,EAAKa,MAAM,CACPlC,OAAO,GACP+B,YAAa,IAJRV,mFASM,IAAAc,EAAAX,KACfY,MAAM,8CACDC,KAAK,SAAAC,GAAQ,OAAEA,EAASC,SACxBF,KAAK,SAAAG,GAAK,OAAIL,EAAKL,SAAS,CAAE9B,OAAOwC,uCAOrC,IAAAC,EACsBjB,KAAKU,MAAzBlC,EADFyC,EACEzC,OAAO+B,EADTU,EACSV,YACRW,EAAiB1C,EAAO2C,OAAO,SAAAC,GACjC,OAAOA,EAAMxD,KAAKyD,cAAcC,SAASf,EAAYc,iBAEzD,OAAQ7C,EAAO+C,OAGXvD,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAA,KAAA,CAAIJ,GAAG,eAAP,gBACAE,EAAAC,EAAAC,cAACsD,EAAD,CAAWvC,aAAce,KAAKI,iBAE9BpC,EAAAC,EAAAC,cAACuD,EAAD,KACIzD,EAAAC,EAAAC,cAACwD,EAAD,CAAUlD,OAAQ0C,MAP9BlD,EAAAC,EAAAC,cAAA,KAAA,KAAA,kBA1BUyD,EAAAA,iBCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,EAAAA,EAASC,OACLlE,EAAAC,EAAAC,cAACiE,EAAD,MACFC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC\",\"sourcesContent\":[\"import React from 'react';\\nimport './Card.css'\\n\\nconst Card =({name,email,id,company}) => {//must use ({}) vs. () b/c Objects aren't valid in React.\\n    \\n    return (\\n        <div className=\\\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\\\">\\n            <img alt=\\\"robots\\\" src={`https://robohash.org/${id}?200x200`} />\\n            <div>\\n                <h2>{name}</h2>\\n                <p>{email}</p>\\n                <p className=\\\"f4 bb\\\">{company}</p>\\n            </div>\\n        </div>\\n\\n    )\\n\\n}\\n\\nexport default Card;\",\"import React from 'react';\\nimport Card from './Card';\\n\\n\\nconst CardList=({robots})=>{\\n    //Map for each el + use [i] of el to go through list \\n    const cardComponent = robots.map((el,i)=>{\\n        return(\\n            <Card \\n            key={i} \\n            id={robots[i].id} \\n            name={robots[i].name} \\n            email={robots[i].email}\\n            company={robots[i].company.name}\\n            />\\n        )\\n\\n    });\\n    //return is easily written with cardComponents which is single line for all nine elements. \\n    \\n    return(\\n    <div>\\n        {cardComponent}\\n    </div>\\n);\\n}\\n\\nexport default CardList\",\"import React from 'react';\\n\\nconst SearchBox=({searchField, searchChange})=>{\\n\\n    return(\\n        <div>\\n            <input \\n            className=\\\"pa3 ba b--green bg-lightest-blue\\\"\\n            type='search' \\n            placeholder='search robots'\\n            onChange={searchChange}\\n        />\\n        </div>\\n    )\\n\\n}\\n\\nexport default SearchBox\",\"import React from 'react';\\n\\nconst Scroll = (props) =>{\\nreturn (\\n    <div style={{overflowY:'scroll', border: '1px solid white', height: '100%'}}>\\n        {props.children}\\n    </div> \\n)\\n}\\n\\nexport default Scroll \",\"import React, {Component} from 'react';\\nimport CardList from '../components/CardList';\\n//import {robots} from './robots';\\nimport SearchBox from '../components/SearchBox';\\nimport Scroll from '../components/Scroll';\\n\\n//PROPS== what you pass in. Come out of STATE \\n//STATE== object that describes your application.\\n\\nclass App extends Component{\\n    constructor(){\\n        super();\\n        this.state={\\n            robots:[],\\n            searchfield: ''\\n        }\\n   \\n    }\\n\\n    componentDidMount(){\\n        fetch('https://jsonplaceholder.typicode.com/users')\\n            .then(response=>response.json())\\n            .then(users => this.setState({ robots:users}));\\n    }\\n\\n    onSearchChange=(event)=>{\\n        this.setState({searchfield:event.target.value})\\n    }\\n\\n    render() {\\n        const {robots,searchfield}=this.state;\\n        const filteredRobots = robots.filter(robot=>{\\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\\n        })\\n        return !robots.length?\\n        <h1>Loading</h1>:\\n        (\\n            <div className=\\\"tc\\\">\\n                <h1 id=\\\"robofriends\\\">RoboFriends </h1>\\n                <SearchBox searchChange={this.onSearchChange}/>\\n                \\n                <Scroll>\\n                    <CardList robots={filteredRobots}/>\\n                </Scroll> \\n            </div>\\n        );\\n    }\\n}\\n\\n\\n\\n\\nexport default App\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\n\\n//import cards \\nimport App from \\\"./containers/App\\\"\\n//formatting import\\nimport 'tachyons';\\nimport * as serviceWorker from './serviceWorker';\\n\\n//What Appears on the Webpage\\nReactDOM.render(\\n    <App />\\n, document.getElementById('root')\\n);\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{14:function(e,t,n){},15:function(e,t,n){},17:function(e,t,n){\"use strict\";n.r(t);var a=n(0),r=n.n(a),o=n(2),c=n.n(o),l=(n(14),n(3)),i=n(4),s=n(6),u=n(5),h=n(7),m=(n(15),function(e){var t=e.name,n=e.email,a=e.id,o=e.company;return r.a.createElement(\"div\",{className:\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\"},r.a.createElement(\"img\",{alt:\"robots\",src:\"https://robohash.org/\".concat(a,\"?200x200\")}),r.a.createElement(\"div\",null,r.a.createElement(\"h2\",null,t),r.a.createElement(\"p\",null,n),r.a.createElement(\"p\",{className:\"f4 bb\"},o)))}),d=function(e){var t=e.robots,n=t.map(function(e,n){return r.a.createElement(m,{key:n,id:t[n].id,name:t[n].name,email:t[n].email,company:t[n].company.name})});return r.a.createElement(\"div\",null,n)},b=function(e){e.searchField;var t=e.searchChange;return r.a.createElement(\"div\",null,r.a.createElement(\"input\",{className:\"pa3 ba b--green bg-lightest-blue\",type:\"search\",placeholder:\"search robots\",onChange:t}))},f=function(e){return r.a.createElement(\"div\",{style:{overflowY:\"scroll\",border:\"1px solid white\",height:\"100%\"}},e.children)},p=function(e){function t(){var e;return Object(l.a)(this,t),(e=Object(s.a)(this,Object(u.a)(t).call(this))).onSearchChange=function(t){e.setState({searchfield:t.target.value})},e.state={robots:[],searchfield:\"\"},e}return Object(h.a)(t,e),Object(i.a)(t,[{key:\"componentDidMount\",value:function(){var e=this;fetch(\"https://jsonplaceholder.typicode.com/users\").then(function(e){return e.json()}).then(function(t){return e.setState({robots:t})})}},{key:\"render\",value:function(){var e=this.state,t=e.robots,n=e.searchfield,a=t.filter(function(e){return e.name.toLowerCase().includes(n.toLowerCase())});return t.length?r.a.createElement(\"div\",{className:\"tc\"},r.a.createElement(\"h1\",{id:\"robofriends\"},\"RoboFriends \"),r.a.createElement(b,{searchChange:this.onSearchChange}),r.a.createElement(f,null,r.a.createElement(d,{robots:a}))):r.a.createElement(\"h1\",null,\"Loading\")}}]),t}(a.Component);n(16),Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));c.a.render(r.a.createElement(p,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})},8:function(e,t,n){e.exports=n(17)}},[[8,1,2]]]);","extractedComments":[]}